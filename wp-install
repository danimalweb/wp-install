#!/bin/bash

# WP install script
#
# Simple bash script to automate installation of WordPress with some settings.
#
# Dependencies:
# 1: WP-CLI
# 2: Bash
##

default_theme_dir=twentyfifteen

# Set up the shell variables for colors
# http://stackoverflow.com/questions/5947742/how-to-change-the-output-color-of-echo-in-linux
yellow=`tput setaf 3`;
green=`tput setaf 2`;
red=`tput setaf 1`;
clear=`tput sgr0`;

function hr ()
{
	echo ""
	echo "-------------------------------------------------------------------------------"
	echo ""
}

function title {
	echo -n "${green}$1${clear}"
}

function error {
	echo -n "${red}$1${clear}"
}

function question {
	echo -n "${yellow}$1${clear}"
}

if [ ! -x "$(command -v wp)" ]; then
	error "wp-cli is not installed."
	echo
	exit 1
fi

# Get install dir from command line - default to current directory
target_dir=${1:-"."}

# Check target exists
if [ ! -d $target_dir ]; then
	error "Target directory is does not exist."
	exit
fi

cd $target_dir

question "Have you already created a database? (Y/n) "
read -e response
response=${response:-n}
if [[ $response =~ ^[Nn]$ ]]
then
	echo "You need to create a database first."
	echo
	exit
fi
unset response

#include config file
. ~/.config/wp-install/config

# accept the name of our website
question "Site name: "
read -e sitename

# accept site url
valid=0;
regex='(https?|ftp|file)://[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|]'
while ((valid==0))
	do
	question "Enter the url of your install (e.g. http://mywebsite.com): "
	read -e urlpath
	if [[ $urlpath =~ $regex ]]
		then
		    valid=1
		else
		    echo "Invalid url please try again."
		fi
done
hr

title "Admin credentials"
echo

# accept admin email
question "Admin email address: "
read -i ${admin_email} -e admin_email

# accept admin username
question "Admin username: "
read -i ${wpuser} -e wpuser

# accept admin password
question "Admin Password: "
read -e pass
if [[ -z "$pass" ]]
	then
  echo "Generating a random password..."
	# generate random 12 character password
	pass=$(LC_CTYPE=C tr -dc A-Za-z0-9_\!\@\#\$\%\^\&\*\(\)-+= < /dev/urandom | head -c 12)
	echo "Admin Password is: ${pass}"
fi
hr

title "Database Details"
echo

# accept user input for the database name
question "Database Name: "
read -e dbname

# accept user input for the databse user
question "Database Username: "
read -e dbuser

# accept user input for the databse password
question "Database Password: "
read -e dbpass

hr

# accept a comma separated list of pages
title "Add a comma separated list of pages that you want in your site: "
read -i ${default_pages} -e default_pages

hr

# Set up gulp.js?
question "Do you want to use npm and gulp? (Y/n) "
read -e npmandgulp
npmandgulp=${npmandgulp:-Y}

# Set up bower?
question "Do you want to use bower? (Y/n) "
read -e bower
bower=${bower:-Y}

# Set up composer?
question "Do you want to use composer? (Y/n) "
read -e composer
composer=${composer:-Y}

hr

# add a simple yes/no confirmation before we proceed
question "Run Install? (Y/n) "
read -e run
run=${run:-Y}

# if the user didn't say no, then go ahead an install
if [ "$run" == n ] ; then
	exit
fi

# download the WordPress core files
wp core download
echo

title "Creating config file..."
echo

# create the wp-config file with our standard setup
wp core config --dbname=$dbname --dbuser=$dbuser --dbpass=$dbpass --skip-check --extra-php <<PHP
define( 'WP_DEBUG', true );
define( 'DISALLOW_FILE_EDIT', true );
PHP
echo

# parse the current directory name
currentdirectory=${pwd##*/}

# create database, and install WordPress
#wp db create
title "Running install..."
echo
wp core install --url="http://$urlpath" --title="$sitename" --admin_user="$wpuser" --admin_password="$pass" --admin_email="$admin_email"
echo

title "Blocking search engines..."
echo
# discourage search engines
wp option update blog_public 0
echo

title "Deleting sample pages..."
echo
# delete sample page, and create homepage
wp post delete $(wp post list --post_type=page --posts_per_page=1 --post_status=publish --pagename="sample-page" --field=ID --format=ids)
echo

title "Creating home page..."
echo
wp post create --post_type=page --post_title=Home --post_status=publish --post_author=$(wp user get $wpuser --field=ID --format=ids)

# set homepage as front page
wp option update show_on_front 'page'

# set homepage to be the new page
wp option update page_on_front $(wp post list --post_type=page --post_status=publish --posts_per_page=1 --pagename=home --field=ID --format=ids)
echo

title "Creating additional pages..."
echo
# create all of the pages
export IFS=","
for page in $default_pages; do
	wp post create --post_type=page --post_status=publish --post_author=$(wp user get $wpuser --field=ID --format=ids) --post_title="$(echo $page | sed -e 's/^ *//' -e 's/ *$//')"
done
echo

# Delete sample post
title "Deleting sample post..."
echo
wp post delete 1 --force
echo

# set pretty urls
title "Setting up pretty urls..."
echo
wp rewrite structure '/%postname%/'
wp rewrite flush
echo

# delete hello dolly
title "Deleting hello dolly plugin..."
echo
wp plugin delete hello

hr


# Yoast SEO
question "Install Yoast SEO? (Y/n) "
read -e response
response=${response:-Y}

if [[ $response =~ ^[Yy]$ ]]
then
	wp plugin install wordpress-seo --activate
fi
unset response
echo


# Regerate Thumbnails
question "Install Regenerate Thumbnails? (Y/n) "
read -e response
response=${response:-Y}
if [[ $response =~ ^[Yy]$ ]]
then
	wp plugin install regenerate-thumbnails --activate
fi
unset response
echo


# Contact Form 7
question "Install Contact Form 7? (Y/n) "
read -e response
response=${response:-Y}
if [[ $response =~ ^[Yy]$ ]]
then
	wp plugin install contact-form-7 --activate
fi
unset response
echo


# Wordpress Sync DB
question "Install WordPress Sync DB? (Y/n) "
read -e response
response=${response:-Y}
if [[ $response =~ ^[Yy]$ ]]
then
	wp plugin install https://github.com/wp-sync-db/wp-sync-db/archive/1.5.zip --activate
	wp plugin install https://github.com/wp-sync-db/wp-sync-db-media-files/archive/1.1.4b1.zip --activate
fi
unset response
echo

if [[ ! -z "$default_theme_name" ]]
then
	question "Install ${default_theme_name} theme? (Y/n) "
	read -e response
	response=${response:-Y}
	if [[ $response =~ ^[Yy]$ ]]
		then
		wp theme install ${default_theme_url}
		theme_folder=$(ls -t wp-content/themes | head -1)
		theme_dir=wp-content/themes/${theme_folder}
		echo

		# Rename theme?
		question "Set theme name to site title name? (Y/n) "
		read -e response
		response=${response:-Y}
		if [[ $response =~ ^[Yy]$ ]]
		then
			title "Renaming theme folder..."
			echo
			folder_name=${sitename// /-}
			folder_name=${folder_name,,}

			mydir=`pwd`
			mv -f $mydir/$theme_dir $mydir/wp-content/themes/$folder_name

			theme_dir=wp-content/themes/$folder_name
			echo "Done!"
			echo

			title "Updating theme title..."
			echo
			# Change the newly cloned theme style.css to the site's name so it displays
			# correctly in the Dashboard.
			themename_old='  Theme Name: '${default_theme_name}
			themename_new='  Theme Name: '${sitename}

			sed -i.bak "s/${themename_old}/${themename_new}/g" "${mydir}/${theme_dir}/style.css"
			echo "Done!"
			echo
		fi

		# Activate Theme
		title "Activating theme..."
		echo
		wp theme activate ${folder_name}

	else
		theme_dir="wp-content/themes/${default_theme_dir}"
	fi
	echo
fi

# Removes the inactive themes that come wth an fresh installation of WP.
# WP needs one active theme, this command removes the inactive ones.
title "Deleting inactive themes..."
echo
wp theme list --status=inactive --field=name | while read THEME; do wp theme delete $THEME; done;
echo

# create a navigation bar
title "Creating menu..."
echo
wp menu create "Main Navigation"

# add pages to navigation
export IFS=" "
for pageid in $(wp post list --order="ASC" --orderby="date" --post_type=page --post_status=publish --posts_per_page=-1 --field=ID --format=ids); do
	wp menu item add-post main-navigation $pageid
done

echo

# Custom Post Types
question "Number of custom post types: (0) "
read -e cpt_count
cpt_count=${cpt_count:-0}
for ((i = 1; i <= cpt_count; i++)); do
	question "(${i}) Custom post type name: "
	read -e post_type
	wp scaffold post-type ${post_type} --theme
	echo

	question "Add taxonomy for this post type? (y/N) "
	read -e response
	response=${response:-N}
	if [[ $response =~ ^[Yy]$ ]]
		then
		question "Taxonomy name: "
		read -e taxonomy
		wp scaffold taxonomy ${taxonomy} --post_types=${post_type} --theme
	fi

	unset response
	unset post_type
	unset taxonomy
done

hr

# Install bower dependencies.
if [[ $bower =~ ^[Yy]$ ]] || [[ $composer =~ ^[Yy]$ ]] || [[ $npmandgulp =~ ^[Yy]$ ]] ; then
	# Change to the theme that contains gulpfile.js
	cd $theme_dir
	title "Changing directories to:"
	pwd
	echo
fi

# Install bower dependencies.
if [[ $bower =~ ^[Yy]$ ]]; then
	if [ -a bower.json ]; then
		title "Installing Bower packages..."
		echo
		bower install --quiet
	else
		title "Running Bower init..."
		echo
		bower init
	fi
	title "Done!"
	echo
fi

# Install composer dependencies.
if [[ $composer =~ ^[Yy]$ ]]; then
	if [ -a composer.json ]; then
		title "Installing Composer packages..."
		echo
		composer install --quiet
	else
		title "Running Composer init..."
		echo
		# composer init
	fi
	title "Done!"
	echo
fi

# Install gulp.js dependencies and start the gulp server.
if [[ $npmandgulp =~ ^[Yy]$ ]] ; then
	if [ -a package.json ]; then
		title "Installing NPM packages..."
		echo
		npm install --quiet
	else
		title "Running NPM init..."
		echo
		npm init
	fi
	title "Done!"
fi

hr

title "Installation is complete. :)"
echo
echo
title "Website: "
echo "http://"$urlpath
title "Admin: "
echo "http://"$urlpath"/wp-admin"
title "Username: "
echo "$wpuser"
title "Password: "
echo "$pass"

hr

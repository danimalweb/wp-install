#!/bin/bash

# WP install script
#
# Simple bash script to automate installation of WordPress with some settings.
#
# Dependencies:
# 1: WP-CLI
# 2: Bash
##

hr ()
{
  echo ""
	echo "==============================================================================="
	echo ""
}

clear

# Set up the shell variables for colors
# http://stackoverflow.com/questions/5947742/how-to-change-the-output-color-of-echo-in-linux
yellow=`tput setaf 3`;
green=`tput setaf 2`;
clear=`tput sgr0`;

echo ""
echo "###########"
echo "## WAIT! ##"
echo "###########"
echo ""
echo "  Make sure you have..."
echo ""
echo "  1. Created a database"
echo ""
echo "  All done?"
echo ""
echo "  Press ENTER to continue, CTRL+C to quit..."
read foo

hr

# accept the name of our website
echo "Enter site name:"
read -e sitename
echo ""

# accept site url
echo "Enter the url of your install"
echo "Example: dev.myside.local"
read -e urlpath
echo ""

hr

# accept admin username
echo "Admin username:"
read -e wpuser
echo ""

# accept admin password
echo "Admin Password:"
read -e pass
echo ""

# accept admin email
echo "Admin email address:"
read -e admin_email
echo ""

hr

# accept a comma separated list of pages
echo "Add a comma separated list of pages that you want in your site:"
read -e allpages

hr

# accept user input for the databse name
echo "Database Name:"
read -e dbname
echo ""

# accept user input for the databse user
echo "Database Username:"
read -e dbuser
echo ""

# accept user input for the databse password
echo "Database Password:"
read -e dbpass
echo ""

hr

# Set up gulp.js?
echo "Do you want to use npm and gulp? (y/n)"
read -e npmandgulp

# Set up bower?
echo "Do you want to use bower? (y/n)"
read -e bower

# Set up composer?
echo "Do you want to use composer? (y/n)"
read -e composer

hr

# add a simple yes/no confirmation before we proceed
echo "${yellow}Run Install? (y/n)"
read -e run

# if the user didn't say no, then go ahead an install
if [ "$run" == n ] ; then
	exit
fi

#clear
hr

# download the WordPress core files
wp core download

echo "Creating config file..."
# create the wp-config file with our standard setup
wp core config --dbname=$dbname --dbuser=$dbuser --dbpass=$dbpass --skip-check --extra-php <<PHP
define( 'WP_DEBUG', true );
define( 'DISALLOW_FILE_EDIT', true );
PHP

# parse the current directory name
currentdirectory=${pwd##*/}

# generate random 12 character password
password=$(LC_CTYPE=C tr -dc A-Za-z0-9_\!\@\#\$\%\^\&\*\(\)-+= < /dev/urandom | head -c 12)

# parse the current directory name
currentdirectory=${pwd##*/}

# create database, and install WordPress
#wp db create
echo "Running install..."
wp core install --url="http://$urlpath" --title="$sitename" --admin_user="$wpuser" --admin_password="$pass" --admin_email="$admin_email"

# discourage search engines
wp option update blog_public 0

# delete sample page, and create homepage
wp post delete $(wp post list --post_type=page --posts_per_page=1 --post_status=publish --pagename="sample-page" --field=ID --format=ids)
wp post create --post_type=page --post_title=Home --post_status=publish --post_author=$(wp user get $wpuser --field=ID --format=ids)

# set homepage as front page
wp option update show_on_front 'page'

# set homepage to be the new page
wp option update page_on_front $(wp post list --post_type=page --post_status=publish --posts_per_page=1 --pagename=home --field=ID --format=ids)

# create all of the pages
export IFS=","
for page in $allpages; do
	wp post create --post_type=page --post_status=publish --post_author=$(wp user get $wpuser --field=ID --format=ids) --post_title="$(echo $page | sed -e 's/^ *//' -e 's/ *$//')"
done

# Delete sample post
wp post delete 1 --force

# set pretty urls
wp rewrite structure '/%postname%/'
wp rewrite flush

# delete hello dolly
wp plugin delete hello

wp plugin install wordpress-seo --activate
wp plugin install regenerate-thumbnails --activate
wp plugin install contact-form-7 --activate
wp plugin install https://github.com/wp-sync-db/wp-sync-db/archive/1.5.zip --activate
wp plugin install https://github.com/wp-sync-db/wp-sync-db-media-files/archive/1.1.4b1.zip --activate

# Install lambda-press theme from a remote zip file
wp theme install https://github.com/danimalweb/lambda-press/archive/master.zip --activate

# create a navigation bar
wp menu create "Main Navigation"

# add pages to navigation
export IFS=" "
for pageid in $(wp post list --order="ASC" --orderby="date" --post_type=page --post_status=publish --posts_per_page=-1 --field=ID --format=ids); do
	wp menu item add-post main-navigation $pageid
done

# Install bower dependencies.
if [ "$bower" == y ] || [ "$composer" == y ] || [ "$npmandgulp" == y ] ; then
	# Change to the theme that contains gulpfile.js
	cd wp-content/themes/lambda-press-master
	echo "Changing directories to:"
	pwd

	bower install
fi

# Install bower dependencies.
if [ "$bower" == y ] ; then
	bower install
fi

# Install composer dependencies.
if [ "$composer" == y ] ; then
	composer install
fi

# Install gulp.js dependencies and start the gulp server.
if [ "$npmandgulp" == y ] ; then

	# Install npm dependencies.
	npm install --loglevel warn

	echo "Finished npm install :)"

fi

hr

echo "Installation is complete. :)"
echo ""
echo "Website: http://"$urlpath
echo "Admin: http://"$urlpath"/wp-admin"
echo "Username: $wpuser"
echo "Password: $pass"

hr
